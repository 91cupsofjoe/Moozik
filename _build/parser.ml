type token =
  | ID of (
# 5 "parser.mly"
        string
# 6 "parser.ml"
)
  | C_NOTE of (
# 6 "parser.mly"
        int
# 11 "parser.ml"
)
  | C_SHARP_NOTE of (
# 6 "parser.mly"
        int
# 16 "parser.ml"
)
  | C_FLAT_NOTE of (
# 6 "parser.mly"
        int
# 21 "parser.ml"
)
  | D_NOTE of (
# 7 "parser.mly"
        int
# 26 "parser.ml"
)
  | D_SHARP_NOTE of (
# 7 "parser.mly"
        int
# 31 "parser.ml"
)
  | D_FLAT_NOTE of (
# 7 "parser.mly"
        int
# 36 "parser.ml"
)
  | E_NOTE of (
# 8 "parser.mly"
        int
# 41 "parser.ml"
)
  | E_SHARP_NOTE of (
# 8 "parser.mly"
        int
# 46 "parser.ml"
)
  | E_FLAT_NOTE of (
# 8 "parser.mly"
        int
# 51 "parser.ml"
)
  | F_NOTE of (
# 9 "parser.mly"
        int
# 56 "parser.ml"
)
  | F_SHARP_NOTE of (
# 9 "parser.mly"
        int
# 61 "parser.ml"
)
  | F_FLAT_NOTE of (
# 9 "parser.mly"
        int
# 66 "parser.ml"
)
  | G_NOTE of (
# 10 "parser.mly"
        int
# 71 "parser.ml"
)
  | G_SHARP_NOTE of (
# 10 "parser.mly"
        int
# 76 "parser.ml"
)
  | G_FLAT_NOTE of (
# 10 "parser.mly"
        int
# 81 "parser.ml"
)
  | A_NOTE of (
# 11 "parser.mly"
        int
# 86 "parser.ml"
)
  | A_SHARP_NOTE of (
# 11 "parser.mly"
        int
# 91 "parser.ml"
)
  | A_FLAT_NOTE of (
# 11 "parser.mly"
        int
# 96 "parser.ml"
)
  | B_NOTE of (
# 12 "parser.mly"
        int
# 101 "parser.ml"
)
  | B_SHARP_NOTE of (
# 12 "parser.mly"
        int
# 106 "parser.ml"
)
  | B_FLAT_NOTE of (
# 12 "parser.mly"
        int
# 111 "parser.ml"
)
  | COMPOSITION
  | TRACK
  | SECTION
  | MEASURE
  | DOT_MEASURES
  | DOT_ADDMEASURES
  | DOT_ADDSECTION
  | DOT_ADDTRACK
  | NEW
  | BEGIN
  | END
  | ASSIGN
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF

open Parsing
let _ = parse_error;;
# 2 "parser.mly"
  open Ast
# 134 "parser.ml"
let yytransl_const = [|
  279 (* COMPOSITION *);
  280 (* TRACK *);
  281 (* SECTION *);
  282 (* MEASURE *);
  283 (* DOT_MEASURES *);
  284 (* DOT_ADDMEASURES *);
  285 (* DOT_ADDSECTION *);
  286 (* DOT_ADDTRACK *);
  287 (* NEW *);
  288 (* BEGIN *);
  289 (* END *);
  290 (* ASSIGN *);
  291 (* SEMICOLON *);
  292 (* LPAREN *);
  293 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* ID *);
  258 (* C_NOTE *);
  259 (* C_SHARP_NOTE *);
  260 (* C_FLAT_NOTE *);
  261 (* D_NOTE *);
  262 (* D_SHARP_NOTE *);
  263 (* D_FLAT_NOTE *);
  264 (* E_NOTE *);
  265 (* E_SHARP_NOTE *);
  266 (* E_FLAT_NOTE *);
  267 (* F_NOTE *);
  268 (* F_SHARP_NOTE *);
  269 (* F_FLAT_NOTE *);
  270 (* G_NOTE *);
  271 (* G_SHARP_NOTE *);
  272 (* G_FLAT_NOTE *);
  273 (* A_NOTE *);
  274 (* A_SHARP_NOTE *);
  275 (* A_FLAT_NOTE *);
  276 (* B_NOTE *);
  277 (* B_SHARP_NOTE *);
  278 (* B_FLAT_NOTE *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\004\000\004\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\008\000\008\000\008\000\008\000\008\000\
\007\000\006\000\006\000\000\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\056\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\003\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\011\000\000\000\000\000\
\000\000\000\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\000\000\
\013\000\009\000\000\000\000\000\000\000\000\000\008\000\004\000\
\005\000\006\000\007\000"

let yydgoto = "\002\000\
\008\000\009\000\010\000\066\000\067\000"

let yysindex = "\024\000\
\148\001\000\000\250\254\025\255\026\255\027\255\028\255\000\000\
\053\000\148\001\252\254\018\255\019\255\020\255\023\255\024\255\
\051\255\052\255\000\000\000\000\029\255\058\255\059\255\061\255\
\056\255\057\255\060\255\063\255\054\255\065\255\053\255\080\255\
\070\255\095\255\093\255\096\255\173\001\083\255\086\255\088\255\
\089\255\090\255\113\255\114\255\116\255\117\255\118\255\119\255\
\120\255\121\255\122\255\123\255\146\255\147\255\148\255\149\255\
\150\255\151\255\152\255\153\255\154\255\155\255\178\255\179\255\
\180\255\091\255\173\001\181\255\000\000\000\000\182\255\183\255\
\184\255\185\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\210\255\
\000\000\000\000\211\255\212\255\213\255\214\255\000\000\000\000\
\000\000\000\000\000\000"

let yyrindex = "\000\000\
\217\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\217\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\217\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\254\254\030\255\062\255\094\255\
\126\255\158\255\190\255\222\255\254\255\030\000\062\000\094\000\
\126\000\158\000\190\000\222\000\254\000\030\001\062\001\094\001\
\126\001\000\000\217\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\208\000\000\000\184\000\000\000"

let yytablesize = 707
let yytable = "\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\011\000\012\000\013\000\014\000\
\001\000\015\000\016\000\017\000\018\000\021\000\035\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\019\000\022\000\023\000\024\000\
\025\000\026\000\030\000\031\000\029\000\032\000\036\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\027\000\028\000\033\000\034\000\
\037\000\039\000\035\000\038\000\041\000\036\000\037\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\040\000\043\000\042\000\068\000\
\069\000\044\000\070\000\096\000\071\000\072\000\038\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\039\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\083\000\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\040\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\093\000\094\000\095\000\098\000\
\002\000\020\000\099\000\100\000\101\000\102\000\041\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\103\000\104\000\105\000\106\000\
\107\000\012\000\097\000\000\000\000\000\000\000\042\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\045\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\048\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\049\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\050\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\051\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\053\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\054\000\055\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\003\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\055\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\005\000\006\000\007\000\045\000\046\000\
\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000"

let yycheck = "\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\027\001\028\001\029\001\030\001\
\001\000\001\001\001\001\001\001\001\001\034\001\033\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\000\000\036\001\036\001\036\001\
\034\001\034\001\001\001\001\001\032\001\001\001\033\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\034\001\034\001\031\001\031\001\
\035\001\037\001\031\001\027\001\023\001\031\001\033\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\037\001\025\001\024\001\037\001\
\035\001\026\001\035\001\033\001\036\001\036\001\033\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\036\001\036\001\035\001\035\001\
\035\001\035\001\035\001\035\001\035\001\035\001\033\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\035\001\035\001\035\001\035\001\
\035\001\035\001\035\001\035\001\035\001\035\001\033\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\035\001\035\001\035\001\035\001\
\000\000\010\000\037\001\037\001\037\001\037\001\033\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\035\001\035\001\035\001\035\001\
\035\001\033\001\067\000\255\255\255\255\255\255\033\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\001\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\023\001\024\001\025\001\026\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001"

let yynames_const = "\
  COMPOSITION\000\
  TRACK\000\
  SECTION\000\
  MEASURE\000\
  DOT_MEASURES\000\
  DOT_ADDMEASURES\000\
  DOT_ADDSECTION\000\
  DOT_ADDTRACK\000\
  NEW\000\
  BEGIN\000\
  END\000\
  ASSIGN\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  ID\000\
  C_NOTE\000\
  C_SHARP_NOTE\000\
  C_FLAT_NOTE\000\
  D_NOTE\000\
  D_SHARP_NOTE\000\
  D_FLAT_NOTE\000\
  E_NOTE\000\
  E_SHARP_NOTE\000\
  E_FLAT_NOTE\000\
  F_NOTE\000\
  F_SHARP_NOTE\000\
  F_FLAT_NOTE\000\
  G_NOTE\000\
  G_SHARP_NOTE\000\
  G_FLAT_NOTE\000\
  A_NOTE\000\
  A_SHARP_NOTE\000\
  A_FLAT_NOTE\000\
  B_NOTE\000\
  B_SHARP_NOTE\000\
  B_FLAT_NOTE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 25 "parser.mly"
            ( _1 )
# 485 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 29 "parser.mly"
              ( [] )
# 491 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 30 "parser.mly"
             ( _1 :: _2 )
# 499 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    Obj.repr(
# 35 "parser.mly"
    ( CompDecl(_2) )
# 506 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    Obj.repr(
# 37 "parser.mly"
    ( TrackDecl(_2) )
# 513 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    Obj.repr(
# 39 "parser.mly"
    ( SectionDecl(_2) )
# 520 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    Obj.repr(
# 41 "parser.mly"
    ( MeasureDecl(_2) )
# 527 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'note_list) in
    Obj.repr(
# 43 "parser.mly"
    ( MeasuresAssign(_1, _6) )
# 535 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 45 "parser.mly"
    ( AddMeasures(_1, _4) )
# 543 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 47 "parser.mly"
    ( AddSection(_1, _4) )
# 551 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 49 "parser.mly"
    ( AddTrack(_1, _4) )
# 559 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
              ( [] )
# 565 "parser.ml"
               : 'note_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'note) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'note_list) in
    Obj.repr(
# 58 "parser.mly"
                 ( _1 :: _2 )
# 573 "parser.ml"
               : 'note_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 62 "parser.mly"
                             ( { pitch = C; duration = _1 } )
# 580 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 63 "parser.mly"
                             ( { pitch = CSharp; duration = _1 } )
# 587 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 64 "parser.mly"
                             ( { pitch = CFlat; duration = _1 } )
# 594 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 65 "parser.mly"
                             ( { pitch = D; duration = _1 } )
# 601 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 66 "parser.mly"
                             ( { pitch = DSharp; duration = _1 } )
# 608 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 67 "parser.mly"
                             ( { pitch = DFlat; duration = _1 } )
# 615 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 68 "parser.mly"
                             ( { pitch = E; duration = _1 } )
# 622 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 69 "parser.mly"
                             ( { pitch = ESharp; duration = _1 } )
# 629 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 70 "parser.mly"
                             ( { pitch = EFlat; duration = _1 } )
# 636 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 71 "parser.mly"
                             ( { pitch = F; duration = _1 } )
# 643 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 72 "parser.mly"
                             ( { pitch = FSharp; duration = _1 } )
# 650 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 73 "parser.mly"
                             ( { pitch = FFlat; duration = _1 } )
# 657 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 74 "parser.mly"
                             ( { pitch = G; duration = _1 } )
# 664 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 75 "parser.mly"
                             ( { pitch = GSharp; duration = _1 } )
# 671 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 76 "parser.mly"
                             ( { pitch = GFlat; duration = _1 } )
# 678 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 77 "parser.mly"
                             ( { pitch = A; duration = _1 } )
# 685 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 78 "parser.mly"
                             ( { pitch = ASharp; duration = _1 } )
# 692 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 79 "parser.mly"
                             ( { pitch = AFlat; duration = _1 } )
# 699 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 80 "parser.mly"
                             ( { pitch = B; duration = _1 } )
# 706 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 81 "parser.mly"
                             ( { pitch = BSharp; duration = _1 } )
# 713 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 82 "parser.mly"
                             ( { pitch = BFlat; duration = _1 } )
# 720 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 83 "parser.mly"
                             ( { pitch = C; duration = _1 } )
# 727 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 84 "parser.mly"
                             ( { pitch = CSharp; duration = _1 } )
# 734 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 85 "parser.mly"
                             ( { pitch = CFlat; duration = _1 } )
# 741 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 86 "parser.mly"
                             ( { pitch = D; duration = _1 } )
# 748 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 87 "parser.mly"
                             ( { pitch = DSharp; duration = _1 } )
# 755 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 88 "parser.mly"
                             ( { pitch = DFlat; duration = _1 } )
# 762 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 89 "parser.mly"
                             ( { pitch = E; duration = _1 } )
# 769 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 90 "parser.mly"
                             ( { pitch = ESharp; duration = _1 } )
# 776 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 91 "parser.mly"
                             ( { pitch = EFlat; duration = _1 } )
# 783 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 92 "parser.mly"
                             ( { pitch = F; duration = _1 } )
# 790 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 93 "parser.mly"
                             ( { pitch = FSharp; duration = _1 } )
# 797 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 94 "parser.mly"
                             ( { pitch = FFlat; duration = _1 } )
# 804 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 95 "parser.mly"
                             ( { pitch = G; duration = _1 } )
# 811 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 96 "parser.mly"
                             ( { pitch = GSharp; duration = _1 } )
# 818 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 97 "parser.mly"
                             ( { pitch = GFlat; duration = _1 } )
# 825 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 98 "parser.mly"
                             ( { pitch = A; duration = _1 } )
# 832 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 99 "parser.mly"
                             ( { pitch = ASharp; duration = _1 } )
# 839 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 100 "parser.mly"
                             ( { pitch = AFlat; duration = _1 } )
# 846 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 101 "parser.mly"
                             ( { pitch = B; duration = _1 } )
# 853 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 102 "parser.mly"
                             ( { pitch = BSharp; duration = _1 } )
# 860 "parser.ml"
               : 'note))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 103 "parser.mly"
                             ( { pitch = BFlat; duration = _1 } )
# 867 "parser.ml"
               : 'note))
(* Entry program_rule *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program_rule (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
;;
